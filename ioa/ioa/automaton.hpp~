#ifndef __automaton_hpp__
#define __automaton_hpp__

#include <boost/utility.hpp>
#include "locker.hpp"

namespace ioa {

  class automaton
    :
    private boost::noncopyable
  {
  private:
    typedef locker<void*> locker_type;
    locker_type m_parameters;
    
  public:
    automaton ()
    { }
    
    virtual ~automaton () { }
    
    virtual void* get_instance () const = 0;

    bool parameter_exists (void* parameter) const {
      return m_parameters.contains (parameter);
    }
    
    bool parameter_exists (const locker_type::key_type& parameter) const {
      return m_parameters.contains (parameter);
    }
    
    template <class T>
    locker_type::key_type declare_parameter (T* parameter) {
      return m_parameters.insert (parameter);
    }
  };

  template <class T>
  class typed_automaton :
    public automaton
  {
  private:
    std::auto_ptr<T> m_instance;
    
  public:
    typed_automaton (T* instance) :
      m_instance (instance)
    { }
    
    void* get_instance () const {
      return m_instance.get ();
    }
    
    T* get_typed_instance () const {
      return m_instance.get ();
    }
  };

  typedef locker<automaton*>::key_type automaton_handle;
}

#endif
