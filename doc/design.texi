\input texinfo  @c -*-texinfo-*-
@c %** Start of header
@setfilename design.info
@settitle The Universal Environment for I/O Automata
@setchapternewpage odd
@c %** End of header

@copying
This manual is for ueioa, version 0.1.

Copyright @copyright{} 2011 Justin R. Wilson.

@quotation
Permission is granted to ...
@end quotation
@end copying

@titlepage
@titlefont{The Universal Environment}
@sp 1
@title for I/O Automata
@subtitle Design Guide
@author Justin R. Wilson

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

Published by ...
@end titlepage

@c So the TOC is printed in the right place.
@contents

@ifnottex
@node Top
@top The Universal Environment for I/O Automata

@insertcopying
@end ifnottex

@chapter Introduction

The two main pieces in @acronym{UEIOA} are the model and the scheduler.

The @dfn{model} contains the set of automata and bindings that exist and executes all actions.
Actions that correspond to the input, output, and internal actions of the I/O automata model are called @dfn{user actions}.
Actions that change the set of automata (create, destroy) or the set of bindings (bind, unbind, destroy) are called @dfn{configuration actions}.
Automata cannot execute or scheule configuration actions directly.  (Why not?)
An action that schedules a configuration action is called a @dfn{system output}.
An action that receives the result of a configuration action is called a @dfn{system input}.
Collectively, system outputs and system inputs are known as @dfn{system actions}.
User actions and system actions do not change the model and can be executed concurrently.
The model is thread-safe to simply the design and implementation of multi-threaded schedulers.

The @dfn{scheduler} contains the set of actions to be applied to the model.
Usually, the scheduler consists of a set of queues that are processed by repeatedly removing an action from a queue and then applying it to the model.
Applying an output or internal action to the model can result in additional actions being added to scheduler as automata invoke the scheduler in their actions.
Applying a system output to the model can result in a configuration action being added to the scheduler.
Applying a configuration action to the model can result in in a number of system inputs being added to the scheduler.
Applying a system input to the model results in the appropriate result being transfered to the automaton.

@chapter Architecture

@section Introduction

@section Model

The model is thread safe.

@subsection Type Safe Binding

@subsection Use of Keys

@subsection Execution

Locking automata in order.

@section Scheduler

@section The Destroy Process

automaton_interface
How does it clean up stuff?

@chapter Miscellaneous

@section Automaton Identifiers

An @dfn{automaton identifier (aid)} is a unique identifier given to each automaton that serves as a flyweight for the related data structures and entries in the system.
An @dfn{automaton handle} is a typed aid that allows referring to an automaton for the purpose of binding.
An aid is valid if the corresponding data structures and entries exist and is invalid otherwise.
A handle is valid if the corresponding aid is valid @emph{and} the type conveyed by the handle matches the type of the automaton referred to by the aid.
An aid or handle can start in an invalid state due to improper initialization.
An aid or handle can start in a valid state and become invalid due to the destruction of the automaton to which it refers.
An aid or handle can be invalid and become valid due to the creation of a new automaton.
The case just mentioned is something that the system should prevent or minimize in its approach to aid allocation.

@subsection Approach 1:  Observer

One approach is to make aids and handles observers of the system data structures.
Aids and handles start in an invalid state.
The system is the only object with the ability to construct valid aids and handles.
The aids and handles can be copied.
When an invalid aid or handle is copied, the receiver becomes invalid.
When a valid aid or handles is copied, the system records the new receiver.
When an automaton is destroyed, all aids and handles that refer to the automaton are sent an event that sets them to the invalid state.
This approach eliminates the serendipitous case when an invalid aid or handle becomes valid due to the creation of an automaton.

The reason that I did not pursue this approach is that a lock must be acquired every time an aid or handle is copied.
My guess is that copying aids and handles in user space is probably not an issue.
The main problem resides in the scheduler which copies an aid/handle upon every invocation.
This might not be an issue in reality but the costs seem to outweigh the benefits.

@subsection Approach 2:  The Long-Cycle No-Repeat ID Factory

Another approach is to allocate identifiers in such a way as to minimize the likelihood of an invalid aid or handle becoming valid.
If we had an infinite set of identifiers, then we would never have to reuse an identifier (no-repeat) and the problem is solved.
However, aids have a finite size so the set of identifiers is finite.
An approximation of a infinite set with a finite set would allocate all identifiers before repeating an identifier (long-cycle).
Treating the set of unused identifiers as a queue solves the problem.
New identifiers are allocated from the front of the queue and reclaimed identifiers are pushed to the back of the queue.
Thus, the time, measured by allocations, between successive uses of an identifier is maximized.
The drawback of this approach is that all unused identifiers must be maintained.
This is not practical.
Consequently, we replace the queue with an index.
Identifiers are allocated by testing the index and incrementing it until an unallocated identifier is found.

The @code{aid_t} type is an integral type for automaton identifiers.
The class @code{sequential_set} implements the Long-Cycle No-Repeat ID Factory concept and is used for allocating aids.

@node Thoughts on Garbage Collection

@section Thoughts on Garbage Collection

The system knows the aid of an automaton before it does anything including allocating memory.
A nice thing to do would be to associate the relevant aid with each piece of allocated memory.
When an automaton is destroyed, all storage still associated with the automaton, i.e., that not deallocated by the deconstructor and indicative of a memory leak, can be deallocated.
This is a big project as it requires writing a memory allocator.

@section Buffers

Output actions must produce a value that can be copied as the system saves a copy to pass to bound inputs.
If an input automaton wishes to save the data for later processing, then the automaton must make a copy of the data.
This becomes inefficient for large values that might need to be copied many times.
The straightforward solution is to put the data in a @dfn{buffer} and pass a pointer to the buffer.
The pointer must be a smart pointer that is both reference-counting and thread-safe.
Additionally, the buffer should be owned by the system and not the output automaton.
See @ref{Thoughts on Garbage Collection} for an explanation.
Finally, the data should become read-only when the output automaton returns.

If a buffer contains pointers to other buffers, then the buffers can form directed acyclic graph.
Linked lists, trees, and other structures are all special cases of a directed acyclic graph.
This leads to a powerful construct where automata can output a list of buffers to process.

@section Thoughts on Performance and Optimization

The first step is to profile the implementation to actually determine what needs optimizing.
I suspect profiling with show these problems.
@enumerate
@item
Unnecessary copying, especially of the values and parameters associated with actions. 
@item
Inefficiency when inserting, removing, and searching certain data structures.
@end enumerate
The solution to the first item is an appropriate use of references and const-correctness.
This applies to the scheduler and system proper but also the helpers and wrappers just outside of the system.
The solution to the second problem is to use better data structures.
I believe that almost every ordered associative container (set and map) can be replaced by a unordered equivalent (hash set and hash map).
One might also need auxiliary indices to acceleration certain operations.
For example, run queues should not contain duplicate output and internal actions.
To prevent an O(N) search, one should maintain a hash with the same contents of the queue.

@section Thoughts on Scheduling

@subsection Multicore

For performance, we would like to pin every automaton to a processor to avoid cache contention.
Ideally, the automata that are composed with that automaton also reside on the same processor.
If the automata form clusters, then we can approximate this ideal by pinning collaborating automata to the same processor.
The optimization problem is to minimize the number of @emph{action executions} that cross processor boundaries.
I emphasized action executions to highlight the difference from actions in the static sense.
If an action is executed often, then it is more costly if the automata are not co-located.
Actions that are executed infrequently can be neglected.

@subsection Real-Time

There are interesting opportunities for real-time computation with I/O automata.
For example, one could implement an EDF scheduler if one were to associated deadlines with each action.
The lack of blocking calls allows one to provide a reasonable estimate of execution time of actions and eases real-time scheduling analysis.
Moving from soft real-time to hard real-time would require making the system more deterministic and using finite data structures to bound execution time.


@chapter Scheduling

For every action there is a set of automata that are involved.
For internal actions, this is just the automaton executing the action.
For an output action, this is the automaton producing the output as well as the set of automata whose inputs will be activated.
If the sets of automata for two actions are disjoint, then the actions can be executed concurrently.

@section System Calls

System calls must be processed in order locally to make sense.

@section I/O

@section I/O Helpers

@enumerate
@item file_automaton
@item unicast_automaton
@item acceptor_automaton
@item connector_automaton
@item multicast_automaton
@item broadcast_automaton
@end enumerate

Back-pressure on send/write.

@section The Simple Scheduler

@chapter Helpers

@subsection Rationale

Why are they dynamic?

Schedule on bound.
Importance of knowing bind status.

@chapter Testing

I should write more tests.
I should shoot for 100% code coverage.
How do we test concurrent systems?

@chapter FAQ

@bye
