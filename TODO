* Buffers
** Reference on alloc
** Explicit change from write to read
** Automatic decref after output
** Efficient duplicate (adds reference so no problem)
** Sanity checks (ueioa.c and automata.c) (will require aid-specific exists function)
* Sanity of buffer used for free inputs

* Code coverage tests ?
* Manager

* Tests to write
  bid_t buffer_alloc (size_t);
  void* buffer_write_ptr (bid_t);
  const void* buffer_read_ptr (bid_t);
  size_t buffer_size (bid_t);
  void buffer_incref (bid_t);
  void buffer_decref (bid_t);
  void buffer_add_child (bid_t, bid_t);
  void buffer_remove_child (bid_t, bid_t);
  bid_t buffer_dup (bid_t);
* Unit tests
** automata.c
** buffers.c
** descriptor.c
** order.c
** receipts.c
** runq.c
** table.c
** ueioa.c
* Test for memory leaks


Probably need to move to separate runqs for each thread.
Purging the runq should be unnecessary if we check the runnable before executing.
This is predicated on aid's not be reused too fast.
As an alternative, one could destroy an automaton by 1) inhibiting the automaton so all existence checks fail, 2) inserting a flush token in all runqs, 3) destroy the automaton when the final flush token has been processed.
